@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Text to PDF</title>

    <!-- React & Babel -->
    <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.development.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.development.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/babel-standalone@6.26.0/babel.min.js"></script>

    <!-- TailwindCSS -->
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 min-h-screen flex items-center justify-center">

    <div id="root" class="w-full max-w-md"></div>

    <script type="text/babel">
        const { useState, useRef } = React;

        function TxtToPdfApp() {
          const fileInput = useRef(null);
          const [errorMsg, setErrorMsg]       = useState('');
          const [downloadUrl, setDownloadUrl] = useState('');
          const [uploading, setUploading]     = useState(false);

          async function handleConvert() {
            setErrorMsg('');
            setDownloadUrl('');
            const file = fileInput.current.files[0];
            if (!file) {
              setErrorMsg('Pick a file first.');
              return;
            }
            if (file.type !== 'text/plain' && !file.name.endsWith('.txt')) {
              setErrorMsg('Only .txt files are accepted.');
              return;
            }

            const fd = new FormData();
            fd.append('file', file);

            setUploading(true);
            try {
              const resp = await fetch('/api/pdf/convert-file', {
                method: 'POST',
                body: fd
              });
              if (!resp.ok) {
                const text = await resp.text();
                throw new Error(text || 'Conversion failed');
              }

              const blob = await resp.blob();
              const url  = URL.createObjectURL(blob);
              setDownloadUrl(url);
            } catch (e) {
              setErrorMsg(e.message);
            } finally {
              setUploading(false);
            }
          }

          return (
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h1 className="text-2xl font-bold mb-4">Text to PDF</h1>

              <input
                type="file"
                accept=".txt,text/plain"
                ref={fileInput}
                className="block w-full text-gray-700 file:mr-4 file:py-2 file:px-4
                           file:rounded-md file:border-0 file:text-sm
                           file:bg-indigo-50 file:text-indigo-700
                           hover:file:bg-indigo-100"
              />

              <button
                onClick={handleConvert}
                disabled={uploading}
                className={`mt-4 w-full text-white py-2 rounded-md ${
                  uploading ? 'bg-gray-400' : 'bg-indigo-600 hover:bg-indigo-700'
                }`}
              >
                {uploading ? 'Uploading…' : 'Upload & Convert'}
              </button>

              {downloadUrl && (
                <a
                  href={downloadUrl}
                  download="Generated.pdf"
                  className="mt-4 inline-block w-full text-center bg-green-600 hover:bg-green-700
                             text-white py-2 rounded-md"
                >
                  Download PDF
                </a>
              )}

              {errorMsg && (
                <p className="mt-4 text-red-600 text-center">
                  {errorMsg}
                </p>
              )}
            </div>
          );
        }

        ReactDOM.render(<TxtToPdfApp />, document.getElementById('root'));
    </script>
</body>
</html>
