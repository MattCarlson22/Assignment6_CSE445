@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PDF to Text Converter</title>

    <!-- React & Babel -->
    <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.development.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.development.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/babel-standalone@6.26.0/babel.min.js"></script>

    <!-- TailwindCSS -->
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 min-h-screen flex items-center justify-center">

    <div id="root" class="w-full max-w-xl"></div>

    <script type="text/babel">
        const { useState, useRef } = React;

        function PdfToTextApp() {
          const fileInput = useRef(null);
          const [includeFormatting, setIncludeFormatting] = useState(false);
          const [errorMsg, setErrorMsg] = useState('');
          const [resultText, setResultText] = useState('');
          const [downloadUrl, setDownloadUrl] = useState('');
          const [loading, setLoading] = useState(false);

          async function handleConvert() {
            setErrorMsg(''); setResultText(''); setDownloadUrl('');

            const file = fileInput.current.files[0];
            if (!file) {
              setErrorMsg('Please select a PDF file.');
              return;
            }
            if (!file.name.endsWith('.pdf')) {
              setErrorMsg('Only .pdf files are accepted.');
              return;
            }

            const form = new FormData();
            form.append('file', file);
            if (includeFormatting) form.append('includeFormatting', 'true');

            setLoading(true);
            try {
              const resp = await fetch('/api/pdf/to-text', {
                method: 'POST',
                body: form
              });
              if (!resp.ok) {
                const txt = await resp.text();
                throw new Error(txt || 'Conversion failed');
              }
              const text = await resp.text();
              setResultText(text);

              const blob = new Blob([text], { type: 'text/plain' });
              const url  = URL.createObjectURL(blob);
              setDownloadUrl(url);
            } catch (e) {
              setErrorMsg(e.message);
            } finally {
              setLoading(false);
            }
          }

          return (
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h1 className="text-2xl font-bold mb-4">PDF to Text Converter</h1>

              <div className="mb-4">
                <input
                  type="file"
                  accept=".pdf"
                  ref={fileInput}
                  className="block w-full text-gray-700 file:mr-4 file:py-2 file:px-4
                             file:rounded-md file:border-0 file:text-sm
                             file:bg-indigo-50 file:text-indigo-700
                             hover:file:bg-indigo-100"
                />
              </div>

              <div className="mb-4 flex items-center">
                <input
                  type="checkbox"
                  id="fmt"
                  checked={includeFormatting}
                  onChange={e => setIncludeFormatting(e.target.checked)}
                  className="mr-2"
                />
                <label htmlFor="fmt" className="text-gray-700">
                  Include Formatting (position, font, color)
                </label>
              </div>

              <button
                onClick={handleConvert}
                disabled={loading}
                className={`w-full text-white py-2 rounded-md ${
                  loading ? 'bg-gray-400' : 'bg-indigo-600 hover:bg-indigo-700'
                }`}
              >
                {loading ? 'Converting…' : 'Convert to Text'}
              </button>

              {downloadUrl && (
                <a
                  href={downloadUrl}
                  download="Converted.txt"
                  className="mt-4 block text-center bg-green-600 hover:bg-green-700
                             text-white py-2 rounded-md"
                >
                  Download Result
                </a>
              )}

              {errorMsg && (
                <p className="mt-4 text-red-600 text-center">{errorMsg}</p>
              )}

              {resultText && (
                <pre className="mt-4 p-4 bg-gray-50 border border-gray-200 rounded-md text-sm whitespace-pre-wrap">
                  {resultText}
                </pre>
              )}
            </div>
          );
        }

        ReactDOM.render(<PdfToTextApp />, document.getElementById('root'));
    </script>
</body>
</html>
